services:
  api:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.ia-resume.com`, `www.api.ia-resume.com`)"
      - "traefik.http.routers.api.entrypoints=websecure,ws,wss"
      - "traefik.http.routers.api.tls.certresolver=myresolver"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
    image: ruby:3.0.1-alpine
    build: 
      context: .
      dockerfile: ./docker/Dockerfile
    env_file:
      - ".env"
    ports:
      - '3000:3000'
      - '9292:9292'
    container_name: api-ruby-resume
    environment:
      DATABASE_URL: postgres://resume-app@postgres/resume-app
      PORT: 3000
      RAILS_ENV: production
    volumes:
      - .:/app
    depends_on:
      - postgres

  postgres:
    image: postgres:9.6.2-alpine
    environment:
      POSTGRES_USER: resume-app
      POSTGRES_DB: resume-app
  redis:
    image: "redis:7.0.8-alpine"
    command: redis-server
    volumes:
      - "redis:/data"

  cable:
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.ws.rule=Host(`ws.ia-resume.com`, `www.ws.ia-resume.com`)"
        - "traefik.http.routers.ws.entrypoints=websecure,wss"
        - "traefik.http.routers.ws.tls.certresolver=myresolver"
        - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
        - traefik.http.routers.ws.middlewares=sslheader
        - "traefik.http.routers.ws.rule=PathPrefix(`/cable`)"
    environment:
      DATABASE_URL: postgres://resume-app@postgres/resume-app
      PORT: 28080
      RAILS_ENV: production
    depends_on:
      - "redis"
    build: 
      context: .
      dockerfile: ./docker/Dockerfile.cable

    ports:
      - "28080:28080"
    volumes:
      - ".:/app"
    env_file:
      - ".env"

  sidekiq:
    environment:
      RAILS_ENV: production
      DATABASE_URL: postgres://resume-app@postgres/resume-app
    depends_on:
      - "postgres"
      - "redis"
    build: 
      context: .
      dockerfile: ./docker/Dockerfile
    command: sidekiq -C config/sidekiq.yml
    volumes:
      - ".:/app"
    env_file:
      - ".env"

volumes:
  redis:
  postgres:

networks:
  default:
    # Use a custom driver
    name: dan1d_network
    driver: bridge
